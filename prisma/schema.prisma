// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String   @unique
  email         String   @unique
  emailVerified DateTime?
  hashedPassword String
  image         String?
  isSuperAdmin  Boolean   @default(false)
  isActivated   Boolean   @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Blog {
  blogId        String    @id @default(uuid())
  title         String
  seoUrl          String   @unique
  shortContent  String?
  content       String
  metaTitle     String?
  metaDescription      String?
  images       Image[]
  hits         BlogHit[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model BlogHit {
  blogHitId        String    @id @default(uuid())
  seoUrl         String    
  blog           Blog     @relation(fields: [seoUrl], references: [seoUrl], onDelete: Cascade)
  hitCount Int       @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bookmark {
  bookmarkId        String    @id @default(uuid())
  title     String
  bookUrl   String
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  contactId     String    @id @default(uuid())
  title         String
  content       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metaTitle     String?
  metaDesc      String?
}

model Newsletter {
  newsletterId        String    @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String
}

model SocialMedia {
  socialMediaId        String    @id @default(uuid())
  name     String
  url      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  imageId        String    @id @default(uuid())
  blogId         String    
  blog           Blog     @relation(fields: [blogId], references: [blogId], onDelete: Cascade)
  url         String  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([blogId])
}